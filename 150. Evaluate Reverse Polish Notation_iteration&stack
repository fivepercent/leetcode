public class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<Integer>();
        int res=0;
        int num2=0;
        int num1=0;
        for(int i=0; i<tokens.length; i++){
            switch(tokens[i]){
                case "+":
                    num2=stack.pop();
                    num1=stack.pop();
                    stack.push(num1+num2);
                    break;
                case "-":
                    num2=stack.pop();
                    num1=stack.pop();
                    stack.push(num1-num2);
                    break;
                case "*":
                    num2=stack.pop();
                    num1=stack.pop();
                    stack.push(num1*num2);
                    break;
                case "/":
                    num2=stack.pop();
                    num1=stack.pop();
                    stack.push(num1/num2);
                    break;
                default : stack.push(convertToNum(tokens[i]));
            }
        }
        return stack.pop();
    }
    public int convertToNum(String str){
        int res=0;
        boolean isNeg=false;
        for(int i=0; i<str.length(); i++){
            //pay attention to '-'&'+' at the beginning
            if(i==0&&str.charAt(i)=='-'||str.charAt(i)=='+'){
                isNeg=str.charAt(i)=='-';
                continue;
            }
            res=res*10+(str.charAt(i)-'0');
        }
        return isNeg?-res:res;
    }
}
