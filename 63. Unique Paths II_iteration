public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if(obstacleGrid==null||obstacleGrid.length==0){
            return 0;
        }
        int len=obstacleGrid[0].length;
        int hgt=obstacleGrid.length;
        int[][] cache = new int[hgt][len];
        if(obstacleGrid[hgt-1][len-1]==1){
            return 0;
        }else{
            cache[hgt-1][len-1]=1;
        }
        for(int i=1; i<len; i++){
            if(obstacleGrid[hgt-1][len-1-i]!=1){
                cache[hgt-1][len-1-i]=1;
            }else{
                break;
            }
        }
        for(int i=1; i<hgt; i++){
            if(obstacleGrid[hgt-1-i][len-1]!=1){
                cache[hgt-1-i][len-1]=1;
            }else{
                break;
            }
        }
        for(int i=1; i<hgt; i++){
            for(int j=1; j<len; j++){
                cache[hgt-1-i][len-1-j]=obstacleGrid[hgt-1-i][len-1-j]==1?0:cache[hgt-i][len-1-j]+cache[hgt-1-i][len-j];
            }
        }
        return cache[0][0];
    }
}
