/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
    Stack<TreeNode> nextStack;
    public BSTIterator(TreeNode root) {
        //next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.
        nextStack=new Stack<TreeNode>();
        //take care if root is null
        TreeNode node = root;
        while(node!=null){
            nextStack.push(node);
            node=node.left;
        }
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !nextStack.isEmpty();
    }

    /** @return the next smallest number */
    public int next() {
        TreeNode node = nextStack.pop();
        int next=node.val;
        if(node.right!=null){
            node=node.right;
            while(node!=null){
                nextStack.push(node);
                node=node.left;
            }
        }
        return next;
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */
