public class Solution {
    public void solve(char[][] board) {
        int row=board.length;
        if(row==0){
            return;
        }
        int col=board[0].length;
        Queue<Integer> queue= new LinkedList<Integer>();
        for(int j=0; j<board[0].length; j++){
            if(board[0][j]=='O'){
                board[0][j]='K';
                enqueue(1, j, queue, board);
            }
            if(board[row-1][j]=='O'){
                board[row-1][j]='K';
                enqueue(row-2, j, queue, board);
            }
        }
        for(int i=0; i<board.length; i++){
            if(board[i][0]=='O'){
                board[i][0]='K';
                enqueue(i, 1, queue, board);
            }
            if(board[i][col-1]=='O'){
                board[i][col-1]='K';
                enqueue(i, col-2, queue, board);
            }
        }
        while(!queue.isEmpty()){
            int current=queue.poll();
            int r=current/col;
            int c=current%col;
            board[r][c]='K';
            enqueue(r+1,c,queue, board);
            enqueue(r-1,c,queue, board);
            enqueue(r,c+1,queue, board);
            enqueue(r,c-1,queue, board);
        }
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(board[i][j]=='K'){
                    board[i][j]='O';
                }else{
                    board[i][j]='X';
                }
            }
        }
    }
    public void enqueue(int x, int y, Queue<Integer> queue, char[][] board){
        int col=board[0].length;
        int row=board.length;
        if(x>=0&&x<row&&y>=0&&y<col&&board[x][y]=='O'){
            queue.offer(x*col+y);
        }
    }
    public boolean isOnTheEdge(int x, int y, char[][] board){
        return x==0||x==board.length||y==0||y==board[0].length;
    }
}
