public class Solution {
    public int ladderLength(String beginWord, String endWord, Set<String> wordList) {
        HashSet<String> visited = new HashSet<String>();
        Queue<String> q = new LinkedList<String>();
        q.offer(beginWord);
        int length =1;
        while(!q.isEmpty()){
            length++;
            int queueLength=q.size();
            for(int i=0; i<queueLength;i++){
                String internal =q.poll();
                //strs in the neighbour are also each other's neighbour.
                for(String neighbour: getNextWord(internal, wordList)){
                    if(visited.contains(neighbour)){
                        continue;
                    }else if(neighbour.equals(endWord)){
                        return length;
                    }else{
                        q.offer(neighbour);
                        //add str into visited here
                        visited.add(neighbour);
                    }
                }
            }
        }
        return 0;
    }
    public ArrayList<String> getNextWord(String target, Set<String> wordList){
        int length=target.length();
        ArrayList<String> neighbours = new ArrayList<String>();
        for(int i=0; i<length; i++){
            StringBuilder sb = new StringBuilder(target);
            for(int j=0; j<26; j++){
                //convert int to char
                sb.setCharAt(i, (char)('a'+j));
                String current=sb.toString();
                if(wordList.contains(current)){
                    neighbours.add(current);
                }
            }
        }
        return neighbours;
    }
}
