/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */
public class Solution {
    public int maxPoints(Point[] points) {
        int len = points.length;
        if(len<=2){
            return len;
        }
        int maximum=0;
        //Double
        HashMap<Double, Integer> map = new HashMap<Double, Integer>();
        for(int i=0; i<len; i++){
            map.clear();
            int dup =0;
            map.put((double)Integer.MIN_VALUE, 1);
            for(int j=i+1; j<len; j++){
                if(points[i].x==points[j].x&&points[i].y==points[j].y){
                    dup++;
                    continue;
                }
                //convert data type before division
                //pay attention to -0.0 and 0.0
                double key = points[i].x==points[j].x?Integer.MIN_VALUE:0.0 +(double)(points[i].y-points[j].y)/(double)(points[i].x-points[j].x);
          //      System.out.println(key);
                if(map.containsKey(key)){
                    map.put(key, map.get(key)+1);
                }else{
                    map.put(key, 2);
                }
            }
            //foreach loop, map.values(), not map
            for(int tmp: map.values()){
                maximum = Math.max(maximum, dup+tmp);
            }
        }
        return maximum;
    }
}
