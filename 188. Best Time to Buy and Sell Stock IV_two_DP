public class Solution {
    public int maxProfit(int k, int[] prices) {
        int len = prices.length;
        if(len<=1){
            return 0;
        }
        if(k>=len/2){
            int profit=0;
            for(int i=1; i<len; i++){
                int diff = prices[i]-prices[i-1];
                if(diff>0){
                    profit+=diff;
               }
            }
            return profit;
        }
        
        int[][] mustSell = new int[len][k+1];
        int[][] globalBenefit = new int[len][k+1];
        
        for(int i=0; i<=k; i++){
            mustSell[0][i]=0;
            globalBenefit[0][i]=0;
        }
        for(int i=1; i<len; i++){
            mustSell[i][0]=0;
            globalBenefit[i][0]=0;
            int priceDiff=prices[i]-prices[i-1];
            for(int j=1; j<=k; j++){
                mustSell[i][j]=Math.max(mustSell[i-1][j], globalBenefit[i-1][j-1])+priceDiff;
                globalBenefit[i][j]=Math.max(mustSell[i][j], globalBenefit[i-1][j]);
            }
        }
        return globalBenefit[len-1][k];
    }
}
