public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<String>();
        if(digits==null||digits.length()==0){
            return result;
        }
        Map<Character, char[]> mapping = new HashMap<Character, char[]>();
        mapping.put('0', new char[] {});
        mapping.put('1', new char[] {});
        mapping.put('2', new char[] {'a', 'b', 'c'});
        mapping.put('3', new char[] {'d', 'e', 'f'});
        mapping.put('4', new char[] {'g', 'h', 'i'});
        mapping.put('5', new char[] {'j', 'k', 'l'});
        mapping.put('6', new char[] {'m', 'n', 'o'});
        mapping.put('7', new char[] {'p', 'q', 'r', 's'});
        mapping.put('8', new char[] {'t', 'u', 'v'});
        mapping.put('9', new char[] {'w', 'x', 'y', 'z'});
        StringBuilder combination= new StringBuilder();
        combine(result, combination, digits, mapping);
        return result;
    }
    
    public void combine(List<String> result, StringBuilder combination, String digits, Map<Character, char[]> mapping){
        if(combination.length()==digits.length()){
            result.add(combination.toString());
            return;
        }
        for(char c: mapping.get(digits.charAt(combination.length()))){
            combination.append(c);
            combine(result, combination, digits, mapping);
            combination.deleteCharAt(combination.length()-1);
        }
    }
}
