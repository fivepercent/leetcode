public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int length=(nums1==null?0:nums1.length)+(nums2==null?0:nums2.length);
        if(length%2==0){
            return (findKthNumber(nums1, 0, nums2, 0, length/2)+findKthNumber(nums1, 0, nums2, 0, length/2+1))/2.0;
        }else{
            return (double)findKthNumber(nums1, 0, nums2, 0, length/2+1);
        }
    }
    public int findKthNumber(int[] nums1, int start1, int[] nums2, int start2, int k){
        if(nums1==null||start1>=nums1.length){
            return nums2[start2+k-1];
        }
        if(nums2==null||start2>=nums2.length){
            return nums1[start1+k-1];
        }
        if(k==1){
           return Math.min((nums1==null?Integer.MIN_VALUE:nums1[start1]), (nums2==null?Integer.MIN_VALUE:nums2[start2]));
           //return Math.min(nums1[start1], nums2[start2]);
        }
        int key1=(start1+k/2-1)<nums1.length?nums1[start1+k/2-1]:Integer.MAX_VALUE;
        int key2=(start2+k/2-1)<nums2.length?nums2[start2+k/2-1]:Integer.MAX_VALUE;
        if(key1>key2){
            return findKthNumber(nums1, start1, nums2, start2+k/2, k-k/2);
        }else{
            return findKthNumber(nums1, start1+k/2, nums2, start2, k-k/2);
        }
    }
}
