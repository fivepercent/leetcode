public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> permutation = new ArrayList<Integer>();
        boolean[] visited = new boolean[nums.length];
        Arrays.sort(nums);
        if(nums!=null&&nums.length!=0){
            permuteGen(nums, visited, result, permutation);
        }
        return result;
    }
    public void permuteGen(int[] nums, boolean[] visited, List<List<Integer>> permutations, List<Integer> permutation){
        if(permutation.size()==nums.length){
            permutations.add(new ArrayList<Integer>(permutation));
        }
        for(int i=0; i<nums.length; i++){
            if(!permutation.contains(nums[i])||(i>0&&!visited[i]&&visited[i-1]&&nums[i]==nums[i-1])){
                permutation.add(nums[i]);
                visited[i]=true;
                permuteGen(nums, visited, permutations, permutation);
                permutation.remove(permutation.size()-1);
                visited[i]=false;
            }
        }
    }
}
