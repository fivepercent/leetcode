public class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> solutions = new ArrayList<List<String>>();
        if(n<=0){
            return solutions;
        }
        char[][] solution = new char[n][n];
        for(int i=0; i<n; i++){
            Arrays.fill(solution[i], '.');
        }
        solveNQueensHelper(solutions, solution, 0, 0);
        return solutions;
    }
    public void solveNQueensHelper(List<List<String>> solutions, char[][] solution, int x, int count){
        int size=solution.length;
        if(count==size){
            List<String> list = new ArrayList<String>();
            for(int i=0; i<size; i++){
                list.add(String.valueOf(solution[i]));
            }
            solutions.add(list);
            return;
        }
        for(int i=x; i<size; i++){
            for(int j=0; j<size; j++){
                if(solution[i][j]!='.'){
                    continue;
                }
                solution[i][j]='Q';
                if(validNQueens(solution, i, j)){
                    solveNQueensHelper(solutions, solution, i, count+1);
                }
                solution[i][j]='.';
            }
        }
    }
    public boolean validNQueens(char[][] chessboard, int i, int j){
        if(chessboard[i][j]!='Q'){
            return true;
        }
        int size=chessboard.length;
        for(int m=0; m<size; m++){
            if(m!=j&&chessboard[i][m]=='Q'){
                return false;
            }
            if(m!=i&&chessboard[m][j]=='Q'){
                return false;
            }
            if(i+j-m<=size-1&&i+j-m>=0&&m!=j&&chessboard[i+j-m][m]=='Q'){
                return false;
            }
            if(i-j+m<=size-1&&i-j+m>=0&&m!=j&&chessboard[i-j+m][m]=='Q'){
                return false;
            }
        }
        return true;
    }
}
