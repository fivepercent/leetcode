/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    private Comparator<ListNode> ListNodeComparator = new Comparator<ListNode>(){
        public int compare(ListNode left, ListNode right){
            if(left==null){
                return 1;
            }
            if(right==null){
                return -1;
            }
            return left.val-right.val;
        }
    };
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null||lists.length==0){
            return null;
        }
        Queue<ListNode> heap = new PriorityQueue<ListNode>(lists.length, ListNodeComparator);
        for(int i=0; i<lists.length;i++){
            if(lists[i]!=null){
                heap.add(lists[i]);
            }
        }
        
        ListNode dummy= new ListNode(0);
        ListNode tail= dummy;
        while(!heap.isEmpty()){
            ListNode current=heap.poll();
            tail.next=current;
            tail=current;
            if(current.next!=null){
                heap.add(current.next);
            }
        }
        return dummy.next;
    }
}
