public class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(n<k){
            return result;
        }
        List<Integer> combination = new ArrayList<Integer>();
        addCombination(result, combination, n, k);
        return result;
    }
    public void addCombination(List<List<Integer>> lists, List<Integer> combination, int n, int k){
        if(combination.size()==k){
            List<Integer> list = new ArrayList<Integer>(combination);
            lists.add(list);
            return;
        }
        int len=combination.size();
        int start=len==0?1:combination.get(len-1)+1;
        //pay attention to the range of i
        for(int i=start; i<=n; i++){
            combination.add(i);
            addCombination(lists, combination, n, k);
            combination.remove(len);
        }
    }
}
