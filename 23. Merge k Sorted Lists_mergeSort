/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null||lists.length==0){
            return null;
        }
        return mergeHelper(lists, 0, lists.length-1);
    }
    public ListNode mergeHelper(ListNode[] lists, int start, int end){
        if(start>end||start<0||end>lists.length-1){
            return null;
        }
        if(start==end){
            return lists[start];
        }
        int mid=(start+end)/2;
        ListNode left=mergeHelper(lists, start, mid);
        ListNode right=mergeHelper(lists, mid+1, end);
        return mergeTwoSortedList(left, right);
    }
    public ListNode mergeTwoSortedList(ListNode left, ListNode right){
        if(left==null){
            return right==null?null:right;
        }
        if(right==null){
            return left;
        }
        ListNode dummy=new ListNode(0);
        ListNode tail=dummy;
        while(left!=null&&right!=null){
            if(left.val<right.val){
                tail.next= new ListNode(left.val);
                left=left.next;
            }else{
                tail.next= new ListNode(right.val);
                right=right.next;
            }
            tail=tail.next;
        }
        tail.next=left==null?right:left;
        return dummy.next;
    }
}
