/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> result = new ArrayList<Interval>();
        if(intervals==null||intervals.size()==0){
            return result;
        }
        Collections.sort(intervals, new intervalComparator());
        Interval current = intervals.get(0);
        for(int i=1; i<intervals.size(); i++){
            Interval next = intervals.get(i);
            if(next.start<=current.end){
                current.end=Math.max(current.end, next.end);
            }else{
                result.add(current);
                current=next;
            }
        }
        result.add(current);
        return result;
    }
    public class intervalComparator implements Comparator<Interval>{
        public int compare(Interval i1, Interval i2){
            return i1.start-i2.start;
        }
    }
}
